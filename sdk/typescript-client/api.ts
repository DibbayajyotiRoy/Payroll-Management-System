/* tslint:disable */
/* eslint-disable */
/**
 * Rust Payroll System API  v1.0
 * A high-performance, next-generation payroll management system API. This documentation provides detailed information on all available endpoints for managing employees, configuring payroll rules, and automating payroll runs. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * Payload for creating a new employee.
 * @export
 * @interface CreateEmployee
 */
export interface CreateEmployee {
    /**
     * 
     * @type {string}
     * @memberof CreateEmployee
     */
    'first_name': string;
    /**
     * 
     * @type {string}
     * @memberof CreateEmployee
     */
    'last_name': string;
    /**
     * 
     * @type {string}
     * @memberof CreateEmployee
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof CreateEmployee
     */
    'department': string;
    /**
     * 
     * @type {string}
     * @memberof CreateEmployee
     */
    'position': string;
    /**
     * 
     * @type {SalaryInfo}
     * @memberof CreateEmployee
     */
    'salary_info': SalaryInfo;
}
/**
 * Payload for creating a new role configuration.
 * @export
 * @interface CreateRoleRequest
 */
export interface CreateRoleRequest {
    /**
     * The ID of the company this role belongs to.
     * @type {string}
     * @memberof CreateRoleRequest
     */
    'company_id': string;
    /**
     * The human-readable name of the role.
     * @type {string}
     * @memberof CreateRoleRequest
     */
    'role_name': string;
    /**
     * The version of this configuration schema.
     * @type {string}
     * @memberof CreateRoleRequest
     */
    'schema_version'?: string;
    /**
     * Base monthly salary in the smallest currency unit (e.g., cents) to avoid floating-point issues.
     * @type {number}
     * @memberof CreateRoleRequest
     */
    'base_salary_minor_units': number;
    /**
     * The ISO 4217 currency code.
     * @type {string}
     * @memberof CreateRoleRequest
     */
    'currency': string;
    /**
     * 
     * @type {OvertimePolicy}
     * @memberof CreateRoleRequest
     */
    'overtime_policy': OvertimePolicy;
    /**
     * A list of policies for different types of leave.
     * @type {Array<LeavePolicy>}
     * @memberof CreateRoleRequest
     */
    'leave_policies': Array<LeavePolicy>;
    /**
     * 
     * @type {number}
     * @memberof CreateRoleRequest
     */
    'working_hours_per_day': number;
    /**
     * 
     * @type {number}
     * @memberof CreateRoleRequest
     */
    'working_days_per_week': number;
    /**
     * 
     * @type {boolean}
     * @memberof CreateRoleRequest
     */
    'is_active': boolean;
}
/**
 * Represents a full employee record in the system.
 * @export
 * @interface Employee
 */
export interface Employee {
    /**
     * The unique identifier for the employee.
     * @type {string}
     * @memberof Employee
     */
    'id'?: string;
    /**
     * The human-readable employee ID.
     * @type {string}
     * @memberof Employee
     */
    'employee_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Employee
     */
    'first_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Employee
     */
    'last_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Employee
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof Employee
     */
    'phone'?: string;
    /**
     * 
     * @type {string}
     * @memberof Employee
     */
    'hire_date'?: string;
    /**
     * 
     * @type {string}
     * @memberof Employee
     */
    'department'?: string;
    /**
     * 
     * @type {string}
     * @memberof Employee
     */
    'position'?: string;
    /**
     * 
     * @type {string}
     * @memberof Employee
     */
    'status'?: string;
    /**
     * 
     * @type {SalaryInfo}
     * @memberof Employee
     */
    'salary_info'?: SalaryInfo;
    /**
     * 
     * @type {string}
     * @memberof Employee
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof Employee
     */
    'updated_at'?: string;
}
/**
 * Defines the rules for a specific type of leave.
 * @export
 * @interface LeavePolicy
 */
export interface LeavePolicy {
    /**
     * Unique identifier for the leave type (e.g., \'SICK\', \'UNPAID\').
     * @type {string}
     * @memberof LeavePolicy
     */
    'leave_type_id'?: string;
    /**
     * Human-readable name of the leave type.
     * @type {string}
     * @memberof LeavePolicy
     */
    'leave_type_name'?: string;
    /**
     * 
     * @type {LeavePolicyDeduction}
     * @memberof LeavePolicy
     */
    'deduction'?: LeavePolicyDeduction;
}
/**
 * Defines how much salary is deducted for this leave type.
 * @export
 * @interface LeavePolicyDeduction
 */
export interface LeavePolicyDeduction {
    /**
     * The type of deduction: \'percent\' of daily salary, \'flat\' amount, or \'none\'.
     * @type {string}
     * @memberof LeavePolicyDeduction
     */
    'type'?: LeavePolicyDeductionTypeEnum;
    /**
     * The value of the deduction. For \'percent\', this is 0-100. For \'flat\', it\'s a monetary value.
     * @type {number}
     * @memberof LeavePolicyDeduction
     */
    'value'?: number;
}

export const LeavePolicyDeductionTypeEnum = {
    Percent: 'percent',
    Flat: 'flat',
    None: 'none'
} as const;

export type LeavePolicyDeductionTypeEnum = typeof LeavePolicyDeductionTypeEnum[keyof typeof LeavePolicyDeductionTypeEnum];

/**
 * Rules defining multipliers for overtime pay.
 * @export
 * @interface OvertimePolicy
 */
export interface OvertimePolicy {
    /**
     * 
     * @type {number}
     * @memberof OvertimePolicy
     */
    'weekday_multiplier'?: number;
    /**
     * 
     * @type {number}
     * @memberof OvertimePolicy
     */
    'weekend_multiplier'?: number;
    /**
     * 
     * @type {number}
     * @memberof OvertimePolicy
     */
    'holiday_multiplier'?: number;
}
/**
 * Detailed results of a payroll calculation for a single employee.
 * @export
 * @interface PayrollCalculationResult
 */
export interface PayrollCalculationResult {
    /**
     * 
     * @type {string}
     * @memberof PayrollCalculationResult
     */
    'employee_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof PayrollCalculationResult
     */
    'period_start'?: string;
    /**
     * 
     * @type {string}
     * @memberof PayrollCalculationResult
     */
    'period_end'?: string;
    /**
     * The final take-home pay for the employee.
     * @type {number}
     * @memberof PayrollCalculationResult
     */
    'net_salary'?: number;
    /**
     * Total earnings before any deductions.
     * @type {number}
     * @memberof PayrollCalculationResult
     */
    'gross_salary'?: number;
    /**
     * The sum of all deductions.
     * @type {number}
     * @memberof PayrollCalculationResult
     */
    'total_deductions'?: number;
}
/**
 * 
 * @export
 * @interface RoleConfiguration
 */
export interface RoleConfiguration {
    /**
     * The ID of the company this role belongs to.
     * @type {string}
     * @memberof RoleConfiguration
     */
    'company_id': string;
    /**
     * The human-readable name of the role.
     * @type {string}
     * @memberof RoleConfiguration
     */
    'role_name': string;
    /**
     * The version of this configuration schema.
     * @type {string}
     * @memberof RoleConfiguration
     */
    'schema_version'?: string;
    /**
     * Base monthly salary in the smallest currency unit (e.g., cents) to avoid floating-point issues.
     * @type {number}
     * @memberof RoleConfiguration
     */
    'base_salary_minor_units': number;
    /**
     * The ISO 4217 currency code.
     * @type {string}
     * @memberof RoleConfiguration
     */
    'currency': string;
    /**
     * 
     * @type {OvertimePolicy}
     * @memberof RoleConfiguration
     */
    'overtime_policy': OvertimePolicy;
    /**
     * A list of policies for different types of leave.
     * @type {Array<LeavePolicy>}
     * @memberof RoleConfiguration
     */
    'leave_policies': Array<LeavePolicy>;
    /**
     * 
     * @type {number}
     * @memberof RoleConfiguration
     */
    'working_hours_per_day': number;
    /**
     * 
     * @type {number}
     * @memberof RoleConfiguration
     */
    'working_days_per_week': number;
    /**
     * 
     * @type {boolean}
     * @memberof RoleConfiguration
     */
    'is_active': boolean;
    /**
     * Unique identifier for the role configuration, generated on creation.
     * @type {string}
     * @memberof RoleConfiguration
     */
    'role_id'?: string;
}
/**
 * 
 * @export
 * @interface SalaryInfo
 */
export interface SalaryInfo {
    /**
     * The base salary amount.
     * @type {number}
     * @memberof SalaryInfo
     */
    'base_salary'?: number;
    /**
     * ISO 4217 currency code.
     * @type {string}
     * @memberof SalaryInfo
     */
    'currency'?: string;
    /**
     * 
     * @type {string}
     * @memberof SalaryInfo
     */
    'pay_frequency'?: SalaryInfoPayFrequencyEnum;
    /**
     * 
     * @type {number}
     * @memberof SalaryInfo
     */
    'overtime_rate'?: number;
}

export const SalaryInfoPayFrequencyEnum = {
    Weekly: 'Weekly',
    BiWeekly: 'BiWeekly',
    Monthly: 'Monthly'
} as const;

export type SalaryInfoPayFrequencyEnum = typeof SalaryInfoPayFrequencyEnum[keyof typeof SalaryInfoPayFrequencyEnum];


/**
 * EmployeesApi - axios parameter creator
 * @export
 */
export const EmployeesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves a list of all employee records. This is a placeholder.
         * @summary List All Employees
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        employeesGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/employees`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a single employee by their unique ID. This is a placeholder.
         * @summary Get Employee by ID
         * @param {string} id The unique identifier of the employee.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        employeesIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('employeesIdGet', 'id', id)
            const localVarPath = `/employees/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new employee record. This endpoint is a placeholder and does not yet connect to the database.
         * @summary Create a New Employee
         * @param {CreateEmployee} createEmployee 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        employeesPost: async (createEmployee: CreateEmployee, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createEmployee' is not null or undefined
            assertParamExists('employeesPost', 'createEmployee', createEmployee)
            const localVarPath = `/employees`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createEmployee, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EmployeesApi - functional programming interface
 * @export
 */
export const EmployeesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EmployeesApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves a list of all employee records. This is a placeholder.
         * @summary List All Employees
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async employeesGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Employee>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.employeesGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EmployeesApi.employeesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves a single employee by their unique ID. This is a placeholder.
         * @summary Get Employee by ID
         * @param {string} id The unique identifier of the employee.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async employeesIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Employee>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.employeesIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EmployeesApi.employeesIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Creates a new employee record. This endpoint is a placeholder and does not yet connect to the database.
         * @summary Create a New Employee
         * @param {CreateEmployee} createEmployee 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async employeesPost(createEmployee: CreateEmployee, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Employee>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.employeesPost(createEmployee, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EmployeesApi.employeesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * EmployeesApi - factory interface
 * @export
 */
export const EmployeesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EmployeesApiFp(configuration)
    return {
        /**
         * Retrieves a list of all employee records. This is a placeholder.
         * @summary List All Employees
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        employeesGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<Employee>> {
            return localVarFp.employeesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a single employee by their unique ID. This is a placeholder.
         * @summary Get Employee by ID
         * @param {string} id The unique identifier of the employee.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        employeesIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<Employee> {
            return localVarFp.employeesIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new employee record. This endpoint is a placeholder and does not yet connect to the database.
         * @summary Create a New Employee
         * @param {CreateEmployee} createEmployee 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        employeesPost(createEmployee: CreateEmployee, options?: RawAxiosRequestConfig): AxiosPromise<Employee> {
            return localVarFp.employeesPost(createEmployee, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EmployeesApi - object-oriented interface
 * @export
 * @class EmployeesApi
 * @extends {BaseAPI}
 */
export class EmployeesApi extends BaseAPI {
    /**
     * Retrieves a list of all employee records. This is a placeholder.
     * @summary List All Employees
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeesApi
     */
    public employeesGet(options?: RawAxiosRequestConfig) {
        return EmployeesApiFp(this.configuration).employeesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a single employee by their unique ID. This is a placeholder.
     * @summary Get Employee by ID
     * @param {string} id The unique identifier of the employee.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeesApi
     */
    public employeesIdGet(id: string, options?: RawAxiosRequestConfig) {
        return EmployeesApiFp(this.configuration).employeesIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a new employee record. This endpoint is a placeholder and does not yet connect to the database.
     * @summary Create a New Employee
     * @param {CreateEmployee} createEmployee 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeesApi
     */
    public employeesPost(createEmployee: CreateEmployee, options?: RawAxiosRequestConfig) {
        return EmployeesApiFp(this.configuration).employeesPost(createEmployee, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PayrollAutomationApi - axios parameter creator
 * @export
 */
export const PayrollAutomationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Fetches the status and results of a specific automated payroll run.
         * @summary Get Payroll Run Status
         * @param {string} runId The UUID of the payroll run job.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payrollRunsRunIdGet: async (runId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'runId' is not null or undefined
            assertParamExists('payrollRunsRunIdGet', 'runId', runId)
            const localVarPath = `/payroll/runs/{run_id}`
                .replace(`{${"run_id"}}`, encodeURIComponent(String(runId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PayrollAutomationApi - functional programming interface
 * @export
 */
export const PayrollAutomationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PayrollAutomationApiAxiosParamCreator(configuration)
    return {
        /**
         * Fetches the status and results of a specific automated payroll run.
         * @summary Get Payroll Run Status
         * @param {string} runId The UUID of the payroll run job.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async payrollRunsRunIdGet(runId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.payrollRunsRunIdGet(runId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PayrollAutomationApi.payrollRunsRunIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PayrollAutomationApi - factory interface
 * @export
 */
export const PayrollAutomationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PayrollAutomationApiFp(configuration)
    return {
        /**
         * Fetches the status and results of a specific automated payroll run.
         * @summary Get Payroll Run Status
         * @param {string} runId The UUID of the payroll run job.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payrollRunsRunIdGet(runId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.payrollRunsRunIdGet(runId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PayrollAutomationApi - object-oriented interface
 * @export
 * @class PayrollAutomationApi
 * @extends {BaseAPI}
 */
export class PayrollAutomationApi extends BaseAPI {
    /**
     * Fetches the status and results of a specific automated payroll run.
     * @summary Get Payroll Run Status
     * @param {string} runId The UUID of the payroll run job.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayrollAutomationApi
     */
    public payrollRunsRunIdGet(runId: string, options?: RawAxiosRequestConfig) {
        return PayrollAutomationApiFp(this.configuration).payrollRunsRunIdGet(runId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PlaceholdersFutureFeaturesApi - axios parameter creator
 * @export
 */
export const PlaceholdersFutureFeaturesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Fetches AI-powered analytics. This is a placeholder for a future feature.
         * @summary Get Analytics Reports
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsReportsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/analytics/reports`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Manually initiates a payroll run. This is a placeholder for a future feature.
         * @summary Manually Trigger a Payroll Run
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payrollRunPost: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/payroll/run`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PlaceholdersFutureFeaturesApi - functional programming interface
 * @export
 */
export const PlaceholdersFutureFeaturesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PlaceholdersFutureFeaturesApiAxiosParamCreator(configuration)
    return {
        /**
         * Fetches AI-powered analytics. This is a placeholder for a future feature.
         * @summary Get Analytics Reports
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async analyticsReportsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.analyticsReportsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PlaceholdersFutureFeaturesApi.analyticsReportsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Manually initiates a payroll run. This is a placeholder for a future feature.
         * @summary Manually Trigger a Payroll Run
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async payrollRunPost(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.payrollRunPost(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PlaceholdersFutureFeaturesApi.payrollRunPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PlaceholdersFutureFeaturesApi - factory interface
 * @export
 */
export const PlaceholdersFutureFeaturesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PlaceholdersFutureFeaturesApiFp(configuration)
    return {
        /**
         * Fetches AI-powered analytics. This is a placeholder for a future feature.
         * @summary Get Analytics Reports
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsReportsGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.analyticsReportsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Manually initiates a payroll run. This is a placeholder for a future feature.
         * @summary Manually Trigger a Payroll Run
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payrollRunPost(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.payrollRunPost(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PlaceholdersFutureFeaturesApi - object-oriented interface
 * @export
 * @class PlaceholdersFutureFeaturesApi
 * @extends {BaseAPI}
 */
export class PlaceholdersFutureFeaturesApi extends BaseAPI {
    /**
     * Fetches AI-powered analytics. This is a placeholder for a future feature.
     * @summary Get Analytics Reports
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaceholdersFutureFeaturesApi
     */
    public analyticsReportsGet(options?: RawAxiosRequestConfig) {
        return PlaceholdersFutureFeaturesApiFp(this.configuration).analyticsReportsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Manually initiates a payroll run. This is a placeholder for a future feature.
     * @summary Manually Trigger a Payroll Run
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaceholdersFutureFeaturesApi
     */
    public payrollRunPost(options?: RawAxiosRequestConfig) {
        return PlaceholdersFutureFeaturesApiFp(this.configuration).payrollRunPost(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * RolesConfigurationApi - axios parameter creator
 * @export
 */
export const RolesConfigurationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves a list of all role configurations in the system.
         * @summary List All Roles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new role configuration, defining salary, leave, and overtime policies for a group of employees.
         * @summary Create a New Role
         * @param {CreateRoleRequest} createRoleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesPost: async (createRoleRequest: CreateRoleRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createRoleRequest' is not null or undefined
            assertParamExists('rolesPost', 'createRoleRequest', createRoleRequest)
            const localVarPath = `/roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createRoleRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a role configuration by its ID.
         * @summary Delete a Role
         * @param {string} roleId The unique identifier for the role.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesRoleIdDelete: async (roleId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roleId' is not null or undefined
            assertParamExists('rolesRoleIdDelete', 'roleId', roleId)
            const localVarPath = `/roles/{role_id}`
                .replace(`{${"role_id"}}`, encodeURIComponent(String(roleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a specific role configuration by its ID.
         * @summary Get Role by ID
         * @param {string} roleId The unique identifier for the role.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesRoleIdGet: async (roleId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roleId' is not null or undefined
            assertParamExists('rolesRoleIdGet', 'roleId', roleId)
            const localVarPath = `/roles/{role_id}`
                .replace(`{${"role_id"}}`, encodeURIComponent(String(roleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates an existing role configuration by its ID.
         * @summary Update a Role
         * @param {string} roleId The unique identifier for the role.
         * @param {RoleConfiguration} roleConfiguration 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesRoleIdPut: async (roleId: string, roleConfiguration: RoleConfiguration, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roleId' is not null or undefined
            assertParamExists('rolesRoleIdPut', 'roleId', roleId)
            // verify required parameter 'roleConfiguration' is not null or undefined
            assertParamExists('rolesRoleIdPut', 'roleConfiguration', roleConfiguration)
            const localVarPath = `/roles/{role_id}`
                .replace(`{${"role_id"}}`, encodeURIComponent(String(roleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(roleConfiguration, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RolesConfigurationApi - functional programming interface
 * @export
 */
export const RolesConfigurationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RolesConfigurationApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves a list of all role configurations in the system.
         * @summary List All Roles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rolesGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RoleConfiguration>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rolesGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RolesConfigurationApi.rolesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Creates a new role configuration, defining salary, leave, and overtime policies for a group of employees.
         * @summary Create a New Role
         * @param {CreateRoleRequest} createRoleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rolesPost(createRoleRequest: CreateRoleRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleConfiguration>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rolesPost(createRoleRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RolesConfigurationApi.rolesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Deletes a role configuration by its ID.
         * @summary Delete a Role
         * @param {string} roleId The unique identifier for the role.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rolesRoleIdDelete(roleId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rolesRoleIdDelete(roleId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RolesConfigurationApi.rolesRoleIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves a specific role configuration by its ID.
         * @summary Get Role by ID
         * @param {string} roleId The unique identifier for the role.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rolesRoleIdGet(roleId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleConfiguration>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rolesRoleIdGet(roleId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RolesConfigurationApi.rolesRoleIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Updates an existing role configuration by its ID.
         * @summary Update a Role
         * @param {string} roleId The unique identifier for the role.
         * @param {RoleConfiguration} roleConfiguration 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rolesRoleIdPut(roleId: string, roleConfiguration: RoleConfiguration, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rolesRoleIdPut(roleId, roleConfiguration, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RolesConfigurationApi.rolesRoleIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * RolesConfigurationApi - factory interface
 * @export
 */
export const RolesConfigurationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RolesConfigurationApiFp(configuration)
    return {
        /**
         * Retrieves a list of all role configurations in the system.
         * @summary List All Roles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<RoleConfiguration>> {
            return localVarFp.rolesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new role configuration, defining salary, leave, and overtime policies for a group of employees.
         * @summary Create a New Role
         * @param {CreateRoleRequest} createRoleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesPost(createRoleRequest: CreateRoleRequest, options?: RawAxiosRequestConfig): AxiosPromise<RoleConfiguration> {
            return localVarFp.rolesPost(createRoleRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a role configuration by its ID.
         * @summary Delete a Role
         * @param {string} roleId The unique identifier for the role.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesRoleIdDelete(roleId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.rolesRoleIdDelete(roleId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a specific role configuration by its ID.
         * @summary Get Role by ID
         * @param {string} roleId The unique identifier for the role.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesRoleIdGet(roleId: string, options?: RawAxiosRequestConfig): AxiosPromise<RoleConfiguration> {
            return localVarFp.rolesRoleIdGet(roleId, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates an existing role configuration by its ID.
         * @summary Update a Role
         * @param {string} roleId The unique identifier for the role.
         * @param {RoleConfiguration} roleConfiguration 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesRoleIdPut(roleId: string, roleConfiguration: RoleConfiguration, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.rolesRoleIdPut(roleId, roleConfiguration, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RolesConfigurationApi - object-oriented interface
 * @export
 * @class RolesConfigurationApi
 * @extends {BaseAPI}
 */
export class RolesConfigurationApi extends BaseAPI {
    /**
     * Retrieves a list of all role configurations in the system.
     * @summary List All Roles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesConfigurationApi
     */
    public rolesGet(options?: RawAxiosRequestConfig) {
        return RolesConfigurationApiFp(this.configuration).rolesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a new role configuration, defining salary, leave, and overtime policies for a group of employees.
     * @summary Create a New Role
     * @param {CreateRoleRequest} createRoleRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesConfigurationApi
     */
    public rolesPost(createRoleRequest: CreateRoleRequest, options?: RawAxiosRequestConfig) {
        return RolesConfigurationApiFp(this.configuration).rolesPost(createRoleRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a role configuration by its ID.
     * @summary Delete a Role
     * @param {string} roleId The unique identifier for the role.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesConfigurationApi
     */
    public rolesRoleIdDelete(roleId: string, options?: RawAxiosRequestConfig) {
        return RolesConfigurationApiFp(this.configuration).rolesRoleIdDelete(roleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a specific role configuration by its ID.
     * @summary Get Role by ID
     * @param {string} roleId The unique identifier for the role.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesConfigurationApi
     */
    public rolesRoleIdGet(roleId: string, options?: RawAxiosRequestConfig) {
        return RolesConfigurationApiFp(this.configuration).rolesRoleIdGet(roleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates an existing role configuration by its ID.
     * @summary Update a Role
     * @param {string} roleId The unique identifier for the role.
     * @param {RoleConfiguration} roleConfiguration 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesConfigurationApi
     */
    public rolesRoleIdPut(roleId: string, roleConfiguration: RoleConfiguration, options?: RawAxiosRequestConfig) {
        return RolesConfigurationApiFp(this.configuration).rolesRoleIdPut(roleId, roleConfiguration, options).then((request) => request(this.axios, this.basePath));
    }
}



